"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.errorMiddleware = void 0;
const contracts_1 = require("../../contracts");
const routing_controllers_1 = require("routing-controllers");
/**
 * Express middleware to process and output errors.
 *
 * Errors extended from [[`ErrorBase`]] or [[`HttpError`]] will be handled and serialized to the response with the corresponding code
 * @param error Error to be processed. ErrorBase will be processed accordingly. Any other Error will result into a 500 with the specified message.
 * @param req express Request
 * @param res express Response
 * @param next express NextFunction
 *
 * @category Middleware
 */
const errorMiddleware = (error, req, res, next) => {
    try {
        let errorData;
        if (error instanceof contracts_1.ErrorBase) {
            errorData = getErrorBaseData(error);
        }
        else if (error instanceof routing_controllers_1.HttpError) {
            errorData = getHttpErrorData(error);
        }
        else {
            errorData = getErrorData(error);
        }
        const { status, message, payload, reason } = errorData;
        if (process.env.PAPIVERBOSE !== 'none') {
            console.error(`[${req.method}] ${req.path} >> StatusCode:: ${status}, Reason:: ${reason}, Message:: ${message}, Payload:: `, payload);
        }
        if (status == 500 || !contracts_1.StatusCode[status]) {
            console.error(`[${req.method}] ${req.path}`, req.body, req.query);
            console.error(error, JSON.stringify(error));
        }
        res.status(contracts_1.StatusCode[status] ? status : 500).json({ message, reason, ...payload });
    }
    catch (error) {
        next(error);
    }
};
exports.errorMiddleware = errorMiddleware;
function getHttpErrorData(error) {
    return {
        status: error.httpCode || contracts_1.StatusCode.serverError,
        message: error.message,
        payload: {},
        reason: '',
    };
}
function getErrorBaseData(error) {
    return {
        status: error.code || contracts_1.StatusCode.serverError,
        message: error.message,
        payload: error.payload,
        reason: error.reason,
    };
}
function getErrorData(error) {
    return {
        status: contracts_1.StatusCode.serverError,
        message: error.message,
        payload: {},
        reason: '',
    };
}
//# sourceMappingURL=error.middleware.js.map