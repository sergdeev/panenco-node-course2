"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceWithEnvConfig = void 0;
var fs = __importStar(require("fs"));
var yaml_1 = require("yaml");
var _1 = require(".");
var replaceWithEnvConfig = function (argv) {
    var file = argv.file;
    var yamlFile = argv.yml;
    var env = process.env;
    if (!file) {
        throw new Error('file should be specified');
    }
    if (!fs.existsSync(file)) {
        throw new Error('file not found');
    }
    if (yamlFile) {
        if (!fs.existsSync(yamlFile)) {
            throw new Error('yaml file not found');
        }
        var yamlEnv = yaml_1.parse(fs.readFileSync(yamlFile).toString());
        env = __assign(__assign({}, yamlEnv), env);
    }
    var settings = _1.applyEnvConfig(JSON.parse(fs.readFileSync(file).toString()), env);
    fs.writeFileSync(file, JSON.stringify(settings));
};
exports.replaceWithEnvConfig = replaceWithEnvConfig;
//# sourceMappingURL=replaceWithEnvConfig.js.map