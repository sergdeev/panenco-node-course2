{"version":3,"sources":["../../../src/tests/handlers/user.handler.test.ts"],"sourcesContent":["import { expect } from \"chai\";\nimport { beforeEach, describe, it } from \"mocha\";\n\nimport { create } from \"../../controllers/users/handlers/create.handler.js\";\nimport { deleteUser } from \"../../controllers/users/handlers/delete.handler.js\";\nimport { get } from \"../../controllers/users/handlers/get.handler.js\";\nimport { getList } from \"../../controllers/users/handlers/getList.handler.js\";\nimport { update } from \"../../controllers/users/handlers/update.handler.js\";\nimport { User } from \"../../entities/user.entity.js\";\nimport { MikroORM, RequestContext } from \"@mikro-orm/core\";\nimport { PostgreSqlDriver } from \"@mikro-orm/postgresql\";\nimport ormConfig from \"../../orm.config.js\";\nimport { randomUUID } from \"crypto\";\n\nconst userFixtures: User[] = [\n\t{\n\t\tname: \"test1\",\n\t\temail: \"test-user+1@panenco.com\",\n\t\tpassword: \"password1\",\n\t} as User,\n\t{\n\t\tname: \"test2\",\n\t\temail: \"test-user+2@panenco.com\",\n\t\tpassword: \"password2\",\n\t} as User,\n];\n\ndescribe(\"Handler tests\", () => {\n\tdescribe(\"User Tests\", () => {\n\t\tlet orm: MikroORM<PostgreSqlDriver>;\n\t\tlet users: User[];\n\t\tbefore(async () => {\n\t\t\torm = await MikroORM.init(ormConfig);\n\t\t});\n\t\tbeforeEach(async () => {\n\t\t\tawait orm.em.execute(`DROP SCHEMA public CASCADE; CREATE SCHEMA public;`);\n\t\t\tawait orm.getMigrator().up();\n\t\t\tconst em = orm.em.fork();\n\t\t\tusers = userFixtures.map((x) => em.create(User, x));\n\t\t\tawait em.persistAndFlush(users);\n\t\t});\n\n\t\tit(\"should get users\", async () => {\n\t\t\tawait RequestContext.createAsync(orm.em.fork(), async () => {\n\t\t\t\tconst [res, total] = await getList(null);\n\t\t\t\texpect(res.some((x) => x.name === 'test2')).true;\n\t\t\t});\n\t\t}); \n\n\t\tit('should get user by id', async () => {\n\t\t\tawait RequestContext.createAsync(orm.em.fork(), async () => {\n\t\t\t\tconst res = await get(users[1].id);\n\n\t\t\t\texpect(res.name).equal('test2');\n\t\t\t\texpect(res.email).equal('test-user+2@panenco.com');\n\t\t\t});\n\t\t});\n\n\t\tit(\"should fail when getting user by unknown id\", async () => {\n\t\t\tawait RequestContext.createAsync(orm.em.fork(), async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait get(randomUUID());\n\t\t\t\t} catch (error) {\n\t\t\t\t\texpect(error.message).equal('User not found');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\texpect(true, 'should have thrown an error').false;\n\t\t\t});\n\t\t});\n\n\t\tit(\"should create user\", async () => {\n\t\t\tawait RequestContext.createAsync(orm.em.fork(), async () => {\n\t\t\t\tconst body = {\n\t\t\t\t\temail: \"test-user+new@panenco.com\",\n\t\t\t\t\tname: \"newUser\",\n\t\t\t\t\tpassword: \"reallysecretstuff\",\n\t\t\t\t} as User;\n\t\t\t\tconst res = await create(body);\n\n\t\t\t\texpect(res.name).equal(\"newUser\");\n\t\t\t\texpect(res.email).equal(\"test-user+new@panenco.com\");\n\t\t\t});\n\t\t});\n\n\t\tit(\"should update user\", async () => {\n\t\t\tawait RequestContext.createAsync(orm.em.fork(), async () => {\n\t\t\t\tconst body = {\n\t\t\t\t\temail: \"test-user+updated@panenco.com\",\n\t\t\t\t} as User;\n\t\t\t\tconst id = users[0].id;\n\n\t\t\t\tconst res = await update(id.toString(), body);\n\n\t\t\t\texpect(res.email).equal(body.email);\n\t\t\t\texpect(res.name).equal('test1');\n\t\t\t\n\t\t\t\tconst foundUser = await orm.em.findOne(User, {id});\n\t\t\t\texpect(foundUser.email).equal(body.email);\n\t\t\t});\n\t\t});\n\n\t\tit(\"should delete user by id\", async () => {\n\t\t\tawait RequestContext.createAsync(orm.em.fork(), async () => {\n\t\t\t\tconst initialCount = await orm.em.count(User);\n\t\t\t\tawait deleteUser(users[0].id);\n\n\t\t\t\tconst newCount = await orm.em.count(User);\n\t\t\t\texpect(initialCount - 1).equal(newCount); \n\t\t\t});\n\t\t});\n\t});\n});\n"],"names":["expect","beforeEach","describe","it","create","deleteUser","get","getList","update","User","MikroORM","RequestContext","ormConfig","randomUUID","userFixtures","name","email","password","orm","users","before","init","em","execute","getMigrator","up","fork","map","x","persistAndFlush","createAsync","res","total","some","true","id","equal","error","message","false","body","toString","foundUser","findOne","initialCount","count","newCount"],"mappings":"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"}