{"version":3,"sources":["../../../src/tests/integration/user.integration.test.ts"],"sourcesContent":["import { expect } from \"chai\";\nimport { beforeEach, describe, it } from \"mocha\";\nimport supertest from \"supertest\";\n\nimport { App } from \"../../app.js\";\nimport { StatusCode } from \"@panenco/papi\";\nimport { User } from \"../../entities/user.entity.js\";\nimport { MikroORM } from \"@mikro-orm/core\";\nimport { PostgreSqlDriver } from \"@mikro-orm/postgresql\";\n\ndescribe(\"Integration tests\", () => {\n\tdescribe(\"User Tests\", () => {\n\t\tlet request: supertest.SuperTest<supertest.Test>;\n\t\tlet orm: MikroORM<PostgreSqlDriver>;\n\t\tbefore(async () => {\n\t\t\tconst app = new App();\n\t\t\tawait app.createConnection();\n\t\t\torm = app.orm;\n\t\t\trequest = supertest(app.host);\n\t\t});\n\n\t\tbeforeEach(async () => {\n\t\t\tawait orm.em.execute(`DROP SCHEMA public CASCADE; CREATE SCHEMA public;`);\n\t\t\tawait orm.getMigrator().up();\n\t\t});\n\n\t\tit(\"should CRUD users\", async () => {\n\t\t\t// Unauthorized without \"api-key\"\n\t\t\tawait request.get(`/api/users`).expect(StatusCode.unauthorized);\n\n\t\t\tconst creds = {\n\t\t\t\temail: \"test-user+1@panenco.com\",\n\t\t\t\tpassword: \"real secret stuff\",\n\t\t\t}\n\n\t\t\t// Successfully create new user\n\t\t\tconst {body: createResponse} = await request\n\t\t\t\t.post(`/api/users`)\n\t\t\t\t.send({\n\t\t\t\t\tname: \"test\",\n\t\t\t\t\t...creds,\n\t\t\t\t} as User)\n\t\t\t\t.expect(StatusCode.created);\n\n\t\t\tconst foundCreatedUser = await orm.em.fork().findOne(User, {\n\t\t\t\tid: createResponse.id,\n\t\t\t\t});\n\t\t\t\texpect(foundCreatedUser.name).equal('test');\n\n\t\t\t// Get the token\n\t\t\tconst {body: loginResponse} = await request\n\t\t\t\t.post(`/api/auth/tokens`)\n\t\t\t\t.send(creds as User)\n\t\t\t\t.expect(StatusCode.ok);\n\n\t\t\tconst token = loginResponse.token;\n\t\t\t\n\t\t\t// Get the newly created user\n\t\t\tconst {body: getResponse} = await request\n\t\t\t\t.get(`/api/users/${createResponse.id}`)\n\t\t\t\t.set('x-auth', token)\n\t\t\t\t.expect(StatusCode.ok);\n\t\t\texpect(getResponse.name).equal(\"test\");\n\n\t\t\t// Successfully update user\n\t\t\tconst {body: updateResponse} = await request\n\t\t\t\t.patch(`/api/users/${createResponse.id}`)\n\t\t\t\t.set('x-auth', token)\n\t\t\t\t.send({\n\t\t\t\t\temail: \"test-user+updated@panenco.com\",\n\t\t\t\t} as User)\n\t\t\t\t.expect(StatusCode.ok);\n\n\t\t\texpect(updateResponse.name).equal(\"test\");\n\t\t\texpect(updateResponse.email).equal(\"test-user+updated@panenco.com\");\n\t\t\texpect(updateResponse.password).undefined; // middleware transformed the object to not include the password\n\n\t\t\t// Get all users\n\t\t\tconst {body: getListRes} = await request\n\t\t\t\t.get(`/api/users`)\n\t\t\t\t.set('x-auth', token)\n\t\t\t\t.expect(StatusCode.ok);\n\t\t\tconst {items, count} = getListRes;\n\t\t\texpect(items.length).equal(1);\n\t\t\texpect(count).equal(1);\n\n\t\t\t// Delete the newly created user\n\t\t\tawait request.delete(`/api/users/${createResponse.id}`).set('x-auth', token).expect(204);\n\n\t\t\t// Get all users again after deleted the only user\n\t\t\tconst {body: getNoneResponse} = await request\n\t\t\t\t.get(`/api/users`)\n\t\t\t\t.set('x-auth', token)\n\t\t\t\t.expect(StatusCode.ok);\n\n\t\t\texpect(getNoneResponse.items.length).equal(0);\n\t\t\texpect(getNoneResponse.count).equal(0);\n\t\t});\n\t});\n});\n"],"names":["expect","beforeEach","describe","it","supertest","App","StatusCode","User","request","orm","before","app","createConnection","host","em","execute","getMigrator","up","get","unauthorized","creds","email","password","body","createResponse","post","send","name","created","foundCreatedUser","fork","findOne","id","equal","loginResponse","ok","token","getResponse","set","updateResponse","patch","undefined","getListRes","items","count","length","delete","getNoneResponse"],"mappings":"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"}