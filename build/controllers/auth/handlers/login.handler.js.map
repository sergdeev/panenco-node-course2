{"version":3,"sources":["../../../../src/controllers/auth/handlers/login.handler.ts"],"sourcesContent":["import { Unauthorized, createAccessToken } from '@panenco/papi';\nimport { LoginBody } from '../../../contracts/login.body.js';\nimport { RequestContext } from '@mikro-orm/core';\nimport { User } from '../../../entities/user.entity.js';\n\nexport const login = async (\n  body: LoginBody\n) => {\n\tconst em = RequestContext.getEntityManager();\n\tconst user = em.findOne(User, {email: body.email});\n\tif (!user || user.password !== body.password) {\n\t\tthrow new Unauthorized('unauthorized', 'Invalid credentials');\n\t}\n\n\tconst token = await createAccessToken('jwtSecretFromConfigHere', 60 * 10, {\n\t\tuserId: user.id,\n\t}); // Important this secret is also used for the authenticator initialization in app.ts\n\treturn token;\n};\n"],"names":["Unauthorized","createAccessToken","RequestContext","User","login","body","em","getEntityManager","user","findOne","email","password","token","userId","id"],"mappings":"AAAA,SAASA,YAAY,EAAEC,iBAAiB,QAAQ,gBAAgB;AAEhE,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,IAAI,QAAQ,mCAAmC;AAExD,OAAO,MAAMC,QAAQ,OACnBC;IAED,MAAMC,KAAKJ,eAAeK,gBAAgB;IAC1C,MAAMC,OAAOF,GAAGG,OAAO,CAACN,MAAM;QAACO,OAAOL,KAAKK,KAAK;IAAA;IAChD,IAAI,CAACF,QAAQA,KAAKG,QAAQ,KAAKN,KAAKM,QAAQ,EAAE;QAC7C,MAAM,IAAIX,aAAa,gBAAgB;IACxC;IAEA,MAAMY,QAAQ,MAAMX,kBAAkB,2BAA2B,KAAK,IAAI;QACzEY,QAAQL,KAAKM,EAAE;IAChB,IAAI,oFAAoF;IACxF,OAAOF;AACR,EAAE"}